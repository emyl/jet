#!/usr/bin/perl -w

# Version 0.2.0
use strict;

use Getopt::Std;
use Net::SSH::Perl::Config;

use constant SSH_BIN => '/usr/bin/ssh';

my $dir = "$ENV{HOME}/.jet";

my %o;
getopts('al:', \%o);

sub trigger {
	my ($u, $s);
	if($o{'l'}) {
		$u = $o{'l'};
	} else {
		my $h = Net::SSH::Perl::Config->new($_[0]);
		$h->read_config("$ENV{HOME}/.ssh/config");
		$u = $h->get('user');
	}
	$s = ($_[0] =~ m/\./) ? $` : $_[0]; 
	link(SSH_BIN, "$dir/$s");
	print "Trying $u\@$_[0]...\n";
	system("$dir/$s $u\@$_[0]");
	exit;
}

sub clean {
	my $f;
	my @f_stat;
	my @ssh_stat = stat(SSH_BIN);
	while(defined($f = <$dir/*>)) {
		@f_stat = stat($f);
		unlink $f if $f_stat[1] == $ssh_stat[1];
	}
}			

mkdir($dir, 0700) unless(-d $dir);

&clean if !int(rand(10));
&trigger($ARGV[0]) if $o{'a'};

my ($m, @m) = 0;
open(KH, '<', "$ENV{HOME}/.ssh/known_hosts");
while(<KH>) {
	s/,/ /;
	my @l = split;
	$m = push(@m, $l[0]) if $l[0] =~ $ARGV[0];
}
close(KH);

if($m == 0) {
	print "No match\n";
	exit;
} elsif($m == 1) {
	&trigger($m[0]);
} else {
	@m = sort(@m);
	my ($c, $ch);
	print "$m matches:\n---\n";
	foreach(@m) {
		$c++;
		print "[$c] $_\n";
	}
	print "---\n";
	my $re = '^(' . join('|', (1..$m)) . ')$';
	do {
		print "Enter your choice [1-$m]: ";
		$ch = <STDIN>;
	} while($ch !~ /$re/);
	&trigger($m[--$ch]);
}
