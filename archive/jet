#!/usr/bin/perl -w

use strict;

use Getopt::Std;

use constant SSH_BIN => '/usr/bin/ssh';

$main::VERSION = '0.3.0';
$Getopt::Std::STANDARD_HELP_VERSION = 1;

my $dir = "$ENV{HOME}/.jet";
my %o;
getopts('al:', \%o);

sub trigger {
	my ($u, $s);
	($o{'l'}) ? $u = $o{'l'} : $u = &_rconf($_[0]);
	$s = ($_[0] =~ m/\./) ? $` : $_[0]; 
	link(SSH_BIN, "$dir/$s");
	print "Trying $u\@$_[0]...\n";
	system("$dir/$s $u\@$_[0]");
	exit;
}

sub clean {
	my $f;
	my @f_stat;
	my @ssh_stat = stat(SSH_BIN);
	while(defined($f = <$dir/*>)) {
		@f_stat = stat($f);
		unlink $f if $f_stat[1] == $ssh_stat[1];
	}
}			

sub _rconf {
	my $hostin = shift(@_);
	my $user = $ENV{USER};
	open(CFG, "$ENV{HOME}/.ssh/config");
	my $hom = 0;
	while(<CFG>) {
        	next if !/\S/ || /^#/;
        	my($key, $args) = $_ =~ /^\s*(\S+)\s+(.+)$/;
        	next unless ($key && $args) && ($hom || ($key eq "Host"));
        	if($key eq "Host") {
                	(my $hostre = $args) =~ s/\*/.*/g;
                	$hostre =~ s/\?/./g;
                	$hom = 1 if($args eq "*" || $hostin =~ /^$hostre$/);
        	} else {
                	next unless $key eq "User";
			$user = $args;
                	last;
        	}
	}
	close(CFG);
	return $user;
}

#die $Getopt::Std::help_mess() unless $ARGV[0];
mkdir($dir, 0700) unless(-d $dir);

&clean if !int(rand(10));
&trigger($ARGV[0]) if $o{'a'};

my ($m, @m) = 0;
open(KH, '<', "$ENV{HOME}/.ssh/known_hosts");
while(<KH>) {
	s/,/ /;
	my @l = split;
	$m = push(@m, $l[0]) if $l[0] =~ $ARGV[0];
}
close(KH);

if($m == 0) {
	print "No match\n";
	exit;
} elsif($m == 1) {
	&trigger($m[0]);
} else {
	@m = sort(@m);
	my ($c, $ch);
	print "$m matches:\n---\n";
	foreach(@m) {
		$c++;
		print "[$c] $_\n";
	}
	print "---\n";
	my $re = '^(' . join('|', (1..$m)) . ')$';
	do {
		print "Enter your choice [1-$m]: ";
		$ch = <STDIN>;
	} while($ch !~ /$re/);
	&trigger($m[--$ch]);
}
